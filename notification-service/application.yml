server:
  port: 9005
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful

spring:
  application:
    name: notification-service

  lifecycle:
    timeout-per-shutdown-phase: 15s

  data:
    mongodb:
      uri: ${vault.mongodb.uri}

  kafka:
    bootstrap-servers: ${vault.kafka.servers}
    consumer:
      group-id: notification-group
      auto-offset-reset: earliest
      enable-auto-commit: false
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: '*'
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        enable.idempotence: true
        acks: all
        retries: 3
    listener:
      ack-mode: manual

  rabbitmq:
    host: ${vault.rabbitmq.host}
    port: ${vault.rabbitmq.port}
    username: ${vault.rabbitmq.username}
    password: ${vault.rabbitmq.password}

  cloud:
    stream:
      defaultBinder: rabbit
    bus:
      enabled: true
      destination: springCloudBus

logging:
  level:
    root: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.apache.kafka.clients.consumer: WARN
    org.springframework.kafka.listener: WARN
  pattern:
    console: >
      {"@timestamp":"%d{yyyy-MM-dd'T'HH:mm:ss.SSSZ}",
       "log.level":"%p",
       "message":"%m",
       "service.name":"${spring.application.name}",
       "trace.id":"%X{traceId}",
       "span.id":"%X{spanId}",
       "thread.name":"%t",
       "logger.name":"%c"}

management:
  metrics:
    enable:
      all: true
  tracing:
    enabled: true
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: ${vault.zipkin.endpoint}
